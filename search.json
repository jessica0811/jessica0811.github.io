[{"categories":["golang"],"content":"前言 在日常开发中，免不了读取各种各样的配置文件，比如json、yml、properties、env、ini等等格式的配置文件，今天我们将介绍在Go里面如何读取yml配置文件，并且根据不同的环境读取不同的配置\n1.创建 test.yml 文件\n1 2 3 4 5 6 7 8 9 10  mysql: name: testdb username: root password: xxxxx port: 3306 redis: host: localhost port: 6379 password: xxxxx db: 1   2.根据配置文件的结果定义结构体，并读取数据\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45  package main import ( \"fmt\" \"github.com/spf13/viper\" \"os\" ) type Database struct { Name string Username string Password string Port int } var a *Database // 进行全局配置，方便其他包进行读取  func main() { path, err := os.Getwd() if err != nil { panic(err) } fmt.Println(path) config := viper.New() config.AddConfigPath(path) //设置读取的文件路径 \tconfig.SetConfigName(\"test\") //设置读取的文件名 \tconfig.SetConfigType(\"yml\") //设置文件的类型 \t//尝试进行配置读取 \tif err := config.ReadInConfig(); err != nil { panic(err) } username := config.GetString(\"mysql.username\") name := config.GetString(\"mysql.name\") port := config.GetInt(\"mysql.port\") a = \u0026Database{ Name: name, Port: port, Username: username, Password: config.GetString(\"mysql.password\"), } fmt.Println(a.Name) fmt.Println(a.Password) fmt.Println(a.Port) }   3.输出结果\n1 2 3 4  /Users/jessica/go_project/test_hystrix/common testdb xxxxx 3306   ","description":"golang","tags":["golang"],"title":"viper读取配置文件","uri":"/posts/viper/"},{"categories":["go-kit"],"content":"架构  每个功能抽取成一个一个的微服务 微服务之间访问是轻量级的，RPC  go-kit 一个分布式的开发工具集，在大型的组织(业务)中可以用来构建微服务。其解决了分布式系统中大多数的常见问题，因此使用者可以将精力集中在业务逻辑上。\ngo-kit的架构图分为三层结构：  Transport 层 Endpoint 层 Service 层  Transport层主要负责与传输协议HTTP，GRPC，THRIFT等相关的逻辑；\nEndpoint层主要负责request／response格式的转换，以及公用拦截器相关的逻辑；\nService层则专注于业务逻辑，就是我们的业务类、接口等相关信息存放。\ngo-kit除了经典的分层架构外，还在endpoint层提供了很多公用的拦截器，如log，metric，tracing，circuitbreaker，rate-limiter等，来保障业务系统的可用性。\n","description":"微服务系列","tags":["go-kit"],"title":"微服务","uri":"/posts/first/"}]
